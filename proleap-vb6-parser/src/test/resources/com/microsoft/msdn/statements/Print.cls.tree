(startRule 
	(module 
		(moduleBody 
			(moduleBodyElement 
				(moduleBlock 
					(block 
						(blockStmt 
							(openStmt Open   
								(valueStmt 
									(literal "TESTFILE"))   For   Output   As   
								(valueStmt 
									(literal #1)))) \n 
						(blockStmt 
							(printStmt Print   
								(valueStmt 
									(literal #1)) ,   
								(outputList 
									(outputList_Expression 
										(valueStmt 
											(literal "This is a test")))))) \n 
						(blockStmt 
							(printStmt Print   
								(valueStmt 
									(literal #1)) ,)) \n 
						(blockStmt 
							(printStmt Print   
								(valueStmt 
									(literal #1)) ,   
								(outputList 
									(outputList_Expression 
										(valueStmt 
											(literal "Zone 1"))) ;   
									(outputList_Expression Tab)   ;   
									(outputList_Expression 
										(valueStmt 
											(literal "Zone 2")))))) \n 
						(blockStmt 
							(printStmt Print   
								(valueStmt 
									(literal #1)) ,   
								(outputList 
									(outputList_Expression 
										(valueStmt 
											(literal "Hello")))   ;   
									(outputList_Expression 
										(valueStmt 
											(literal " ")))   ;   
									(outputList_Expression 
										(valueStmt 
											(literal "World")))))) \n 
						(blockStmt 
							(printStmt Print   
								(valueStmt 
									(literal #1)) ,   
								(outputList 
									(outputList_Expression Spc ( 
										(argsCall 
											(argCall 
												(valueStmt 
													(literal 5)))) ))   ;   
									(outputList_Expression 
										(valueStmt 
											(literal "5 leading spaces ")))))) \n 
						(blockStmt 
							(printStmt Print   
								(valueStmt 
									(literal #1)) ,   
								(outputList 
									(outputList_Expression Tab ( 
										(argsCall 
											(argCall 
												(valueStmt 
													(literal 10)))) ))   ;   
									(outputList_Expression 
										(valueStmt 
											(literal "Hello")))))) \n \n \n 
						(blockStmt 
							(variableStmt Dim   
								(variableListStmt 
									(variableSubStmt 
										(ambiguousIdentifier MyBool)) ,   
									(variableSubStmt 
										(ambiguousIdentifier MyDate)) ,   
									(variableSubStmt 
										(ambiguousIdentifier MyNull)) ,   
									(variableSubStmt 
										(ambiguousIdentifier MyError))))) \n 
						(blockStmt 
							(letStmt 
								(implicitCallStmt_InStmt 
									(iCS_S_VariableOrProcedureCall 
										(ambiguousIdentifier MyBool)))   =   
								(valueStmt 
									(literal False))))  :  
						(blockStmt 
							(letStmt 
								(implicitCallStmt_InStmt 
									(iCS_S_VariableOrProcedureCall 
										(ambiguousIdentifier MyDate)))   =   
								(valueStmt 
									(literal #February 12, 1969#))))  :  
						(blockStmt 
							(letStmt 
								(implicitCallStmt_InStmt 
									(iCS_S_VariableOrProcedureCall 
										(ambiguousIdentifier MyNull)))   =   
								(valueStmt 
									(literal Null)))) \n 
						(blockStmt 
							(letStmt 
								(implicitCallStmt_InStmt 
									(iCS_S_VariableOrProcedureCall 
										(ambiguousIdentifier MyError)))   =   
								(valueStmt 
									(implicitCallStmt_InStmt 
										(iCS_S_ProcedureOrArrayCall 
											(ambiguousIdentifier CVErr) ( 
											(argsCall 
												(argCall 
													(valueStmt 
														(literal 32767)))) )))))) \n \n \n \n 
						(blockStmt 
							(printStmt Print   
								(valueStmt 
									(literal #1)) ,   
								(outputList 
									(outputList_Expression 
										(valueStmt 
											(implicitCallStmt_InStmt 
												(iCS_S_VariableOrProcedureCall 
													(ambiguousIdentifier MyBool)))))   ;   
									(outputList_Expression 
										(valueStmt 
											(literal " is a Boolean value")))))) \n 
						(blockStmt 
							(printStmt Print   
								(valueStmt 
									(literal #1)) ,   
								(outputList 
									(outputList_Expression 
										(valueStmt 
											(implicitCallStmt_InStmt 
												(iCS_S_VariableOrProcedureCall 
													(ambiguousIdentifier MyDate)))))   ;   
									(outputList_Expression 
										(valueStmt 
											(literal " is a date")))))) \n 
						(blockStmt 
							(printStmt Print   
								(valueStmt 
									(literal #1)) ,   
								(outputList 
									(outputList_Expression 
										(valueStmt 
											(implicitCallStmt_InStmt 
												(iCS_S_VariableOrProcedureCall 
													(ambiguousIdentifier MyNull)))))   ;   
									(outputList_Expression 
										(valueStmt 
											(literal " is a null value")))))) \n 
						(blockStmt 
							(printStmt Print   
								(valueStmt 
									(literal #1)) ,   
								(outputList 
									(outputList_Expression 
										(valueStmt 
											(implicitCallStmt_InStmt 
												(iCS_S_VariableOrProcedureCall 
													(ambiguousIdentifier MyError)))))   ;   
									(outputList_Expression 
										(valueStmt 
											(literal " is an error value")))))) \n 
						(blockStmt 
							(closeStmt Close   
								(valueStmt 
									(literal #1))))))))) <EOF>)